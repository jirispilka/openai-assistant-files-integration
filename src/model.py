# generated by datamodel-codegen:
#   filename:  input_schema.json
#   timestamp: 2024-04-16T12:23:19+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, constr


class OpenaiAssistantFilesIntegrationInputs(BaseModel):
    assistant_id: str = Field(
        ..., description='OpenAI Assistant ID', title='OpenAI Assistant ID'
    )
    openai_api_key: str = Field(
        ..., description='OpenAI API KEY', title='OpenAI API KEY'
    )
    dataset_id: Optional[str] = Field(
        None,
        description='Dataset ID (when running standalone without integration)',
        title='Dataset ID',
    )
    fields: List = Field(
        ...,
        description='A list of fields which should be selected from the items, only these fields will remain in the resulting record objects.\n\n For example, when using the website content crawler, you might select fields such as `text` and `url`, and `metadata.title` among others, to be included in the Assistant file.',
        title='A list of fields which should be selected from the items',
    )
    file_ids_to_delete: Optional[List] = Field(
        None,
        description='Delete specified file ids. This can be useful to delete files that are no longer needed.',
        title='Array of Assistant file ids to deleted',
    )
    file_prefix: Optional[constr(min_length=5)] = Field(
        None,
        description="Using a file prefix streamlines the management of Assistant file updates by eliminating the need to track each file's ID. For instance, if you set the file_prefix to 'apify-advisor', the Actor will initially locate all files associated with the Assistant that have this prefix. Subsequently, it will delete these files and create new ones, also prefixed accordingly.",
        title='Delete/Create Assistant files with a prefix',
    )
